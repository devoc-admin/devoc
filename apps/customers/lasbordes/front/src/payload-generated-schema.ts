/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-vercel-postgres";
import { relations } from "@payloadcms/db-vercel-postgres/drizzle";
import {
  foreignKey,
  index,
  integer,
  jsonb,
  numeric,
  pgTable,
  serial,
  timestamp,
  uniqueIndex,
  varchar,
} from "@payloadcms/db-vercel-postgres/drizzle/pg-core";

export const users_sessions = pgTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    }).notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => [
    index("users_sessions_order_idx").on(columns._order),
    index("users_sessions_parent_id_idx").on(columns._parentID),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  ]
);

export const users = pgTable(
  "users",
  {
    createdAt: timestamp("created_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    hash: varchar("hash"),
    id: serial("id").primaryKey(),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    }),
    loginAttempts: numeric("login_attempts", { mode: "number" }).default(0),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    }),
    resetPasswordToken: varchar("reset_password_token"),
    salt: varchar("salt"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("users_updated_at_idx").on(columns.updatedAt),
    index("users_created_at_idx").on(columns.createdAt),
    uniqueIndex("users_email_idx").on(columns.email),
  ]
);

export const media = pgTable(
  "media",
  {
    alt: varchar("alt").notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
    filename: varchar("filename"),
    filesize: numeric("filesize", { mode: "number" }),
    focalX: numeric("focal_x", { mode: "number" }),
    focalY: numeric("focal_y", { mode: "number" }),
    height: numeric("height", { mode: "number" }),
    id: serial("id").primaryKey(),
    mimeType: varchar("mime_type"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    width: numeric("width", { mode: "number" }),
  },
  (columns) => [
    index("media_updated_at_idx").on(columns.updatedAt),
    index("media_created_at_idx").on(columns.createdAt),
    uniqueIndex("media_filename_idx").on(columns.filename),
  ]
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    createdAt: timestamp("created_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
    globalSlug: varchar("global_slug"),
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("payload_locked_documents_global_slug_idx").on(columns.globalSlug),
    index("payload_locked_documents_updated_at_idx").on(columns.updatedAt),
    index("payload_locked_documents_created_at_idx").on(columns.createdAt),
  ]
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    mediaID: integer("media_id"),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => [
    index("payload_locked_documents_rels_order_idx").on(columns.order),
    index("payload_locked_documents_rels_parent_idx").on(columns.parent),
    index("payload_locked_documents_rels_path_idx").on(columns.path),
    index("payload_locked_documents_rels_users_id_idx").on(columns.usersID),
    index("payload_locked_documents_rels_media_id_idx").on(columns.mediaID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
  ]
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    createdAt: timestamp("created_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
    id: serial("id").primaryKey(),
    key: varchar("key"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
    value: jsonb("value"),
  },
  (columns) => [
    index("payload_preferences_key_idx").on(columns.key),
    index("payload_preferences_updated_at_idx").on(columns.updatedAt),
    index("payload_preferences_created_at_idx").on(columns.createdAt),
  ]
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => [
    index("payload_preferences_rels_order_idx").on(columns.order),
    index("payload_preferences_rels_parent_idx").on(columns.parent),
    index("payload_preferences_rels_path_idx").on(columns.path),
    index("payload_preferences_rels_users_id_idx").on(columns.usersID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  ]
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    batch: numeric("batch", { mode: "number" }),
    createdAt: timestamp("created_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
    id: serial("id").primaryKey(),
    name: varchar("name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      precision: 3,
      withTimezone: true,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index("payload_migrations_updated_at_idx").on(columns.updatedAt),
    index("payload_migrations_created_at_idx").on(columns.createdAt),
  ]
);

export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  })
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  })
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  })
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({})
);

type DatabaseSchema = {
  users_sessions: typeof users_sessions;
  users: typeof users;
  media: typeof media;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-vercel-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
